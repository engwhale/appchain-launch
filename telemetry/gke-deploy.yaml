---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: default
  name: substrate-telemetry-ingress
spec:
  defaultBackend:
    service:
      name: telemetry-frontend
      port:
        number: 3000
  rules:
  - http:
      paths:
      - path: /feed
        pathType: ImplementationSpecific
        backend:
          service:
            name: telemetry-backend
            port:
              number: 8000
      - path: /submit
        pathType: ImplementationSpecific
        backend:
          service:
            name: telemetry-backend
            port:
              number: 8001

---
# core backendconfig: healthcheck(/health) & websocket timeout(3600s)
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  namespace: default
  name: telemetry-backend-core-backendconfig
spec:
  healthCheck:
    type: HTTP
    requestPath: /health
    port: 8000
  timeoutSec: 3600
  connectionDraining:
    drainingTimeoutSec: 3600

---
# shard backendconfig: healthcheck(/health) & websocket timeout(3600s)
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  namespace: default
  name: telemetry-backend-shard-backendconfig
spec:
  healthCheck:
    type: HTTP
    requestPath: /health
    port: 8001
  timeoutSec: 3600
  connectionDraining:
    drainingTimeoutSec: 3600

---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: telemetry-backend
  labels:
    app: telemetry-backend
  annotations:
    cloud.google.com/backend-config: '{"ports": {"8000":"telemetry-backend-core-backendconfig","8001":"telemetry-backend-shard-backendconfig"}}'
spec:
  type: NodePort
  selector:
    app: telemetry-backend
  ports:
    - name: core
      port: 8000
      targetPort: 8000
      protocol: TCP
    - name: shard
      port: 8001
      targetPort: 8001
      protocol: TCP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: telemetry-backend
  labels:
    app: telemetry-backend
spec:
  selector:
    matchLabels:
      app: telemetry-backend
  replicas: 1
  template:
    metadata:
      labels:
        app: telemetry-backend
    spec:
      containers:
      - name: telemetry-backend-core
        image: us-central1-docker.pkg.dev/octopus-prod/octopus/substrate-telemetry/backend@sha256:743a90f9abccc2a2d299f0055d71bc667e226b2dd9c3c7a9e37ca7787f31f6ec
        command: ["telemetry_core"]
        args: [
          "--listen", 
          "0.0.0.0:8000"
        ]
        securityContext:
          readOnlyRootFilesystem: true
        ports:
        - containerPort: 8000
      - name: telemetry-backend-shard
        image: us-central1-docker.pkg.dev/octopus-prod/octopus/substrate-telemetry/backend@sha256:743a90f9abccc2a2d299f0055d71bc667e226b2dd9c3c7a9e37ca7787f31f6ec
        command: ["telemetry_shard"]
        args: [
          "--listen", 
          "0.0.0.0:8001",
          "--core",
          "http://127.0.0.1:8000/shard_submit"
        ]
        securityContext:
          readOnlyRootFilesystem: true
        ports:
        - containerPort: 8001

---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: telemetry-frontend
  labels:
    app: telemetry-frontend
spec:
  type: NodePort
  selector:
    app: telemetry-frontend
  ports:
    - port: 3000
      targetPort: 8000
      protocol: TCP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: telemetry-frontend
  labels:
    app: telemetry-frontend
spec:
  selector:
    matchLabels:
      app: telemetry-frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: telemetry-frontend
    spec:
      containers:
      - name: telemetry-frontend
        image: us-central1-docker.pkg.dev/octopus-prod/octopus/substrate-telemetry/frontend@sha256:e323452c00ff075b556963cd683553094af58e0406aed86e656ec4268aea7888
        env:
        - name: SUBSTRATE_TELEMETRY_URL
          value: wss://telemetry.testnet.octopus.network/feed
        # securityContext:
        #   readOnlyRootFilesystem: true
        ports:
        - containerPort: 8000
        volumeMounts:
        - name: tmpfs-1
          mountPath: /var/cache/nginx
        - name: tmpfs-2
          mountPath: /var/run
        - name: tmpfs-3
          mountPath: /var/tmp
      volumes:
      - name: tmpfs-1
        emptyDir: {}
      - name: tmpfs-2
        emptyDir: {}
      - name: tmpfs-3
        emptyDir: {}
      # securityContext:
        # runAsUser: 101
        # runAsGroup: 101
        # fsGroup: 101
